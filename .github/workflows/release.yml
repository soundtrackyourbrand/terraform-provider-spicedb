# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - "v*"

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write
  id-token: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
      - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Authenticate with Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: "projects/211434139558/locations/global/workloadIdentityPools/tf-publisher-gha/providers/tf-publisher-gha-provider"
          service_account: "tf-publisher-gha@syb-staging-infrastructure.iam.gserviceaccount.com"

      - name: Fetch secrets
        id: fetch_secrets
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            pk:syb-staging-infrastructure/platform-private-key
            passphrase:syb-staging-infrastructure/platform-passphrase
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@82a020f1f7f605c65dd2449b392a52c3fcfef7ef # v6.0.0
        id: import_gpg
        with:
          gpg_private_key: ${{ steps.fetch_secrets.outputs.pk }}
          passphrase: ${{ steps.fetch_secrets.outputs.passphrase }}
      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8 # v5.0.0
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Parse artifacts
        id: parse_artifacts
        shell: bash
        working-directory: "dist"
        run: echo "sha256sums=$(ls $PWD/*SHA256SUMS)" >> "$GITHUB_OUTPUT"

      - name: Setup Go 1.22
        uses: actions/setup-go@v2
        with:
          go-version: 1.22

      - name: Publish to Boring registry bucket
        working-directory: "dist"
        run: |
          go install github.com/boring-registry/boring-registry@v0.14.0
          echo "SHA256SUMS: ${{ steps.parse_artifacts.outputs.sha256sums }}"
          cat ${{ steps.parse_artifacts.outputs.sha256sums }} | grep json
          echo "Uploading to Boring registry bucket"
          boring-registry upload provider --namespace spicedb --filename-sha256sums ${{ steps.parse_artifacts.outputs.sha256sums }} --storage-gcs-bucket tf-boring-registry-test
